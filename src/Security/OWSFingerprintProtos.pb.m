// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "OWSFingerprintProtos.pb.h"
// @@protoc_insertion_point(imports)

@implementation OWSFingerprintProtosOwsfingerprintProtosRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [OWSFingerprintProtosOwsfingerprintProtosRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface OWSFingerprintProtosFingerprintData ()
@property (strong) NSData* publicKey;
@property (strong) NSData* identifier;
@end

@implementation OWSFingerprintProtosFingerprintData

- (BOOL) hasPublicKey {
  return !!hasPublicKey_;
}
- (void) setHasPublicKey:(BOOL) _value_ {
  hasPublicKey_ = !!_value_;
}
@synthesize publicKey;
- (BOOL) hasIdentifier {
  return !!hasIdentifier_;
}
- (void) setHasIdentifier:(BOOL) _value_ {
  hasIdentifier_ = !!_value_;
}
@synthesize identifier;
- (instancetype) init {
  if ((self = [super init])) {
    self.publicKey = [NSData data];
    self.identifier = [NSData data];
  }
  return self;
}
static OWSFingerprintProtosFingerprintData* defaultOWSFingerprintProtosFingerprintDataInstance = nil;
+ (void) initialize {
  if (self == [OWSFingerprintProtosFingerprintData class]) {
    defaultOWSFingerprintProtosFingerprintDataInstance = [[OWSFingerprintProtosFingerprintData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOWSFingerprintProtosFingerprintDataInstance;
}
- (instancetype) defaultInstance {
  return defaultOWSFingerprintProtosFingerprintDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPublicKey) {
    [output writeData:1 value:self.publicKey];
  }
  if (self.hasIdentifier) {
    [output writeData:2 value:self.identifier];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPublicKey) {
    size_ += computeDataSize(1, self.publicKey);
  }
  if (self.hasIdentifier) {
    size_ += computeDataSize(2, self.identifier);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OWSFingerprintProtosFingerprintData*) parseFromData:(NSData*) data {
  return (OWSFingerprintProtosFingerprintData*)[[[OWSFingerprintProtosFingerprintData builder] mergeFromData:data] build];
}
+ (OWSFingerprintProtosFingerprintData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OWSFingerprintProtosFingerprintData*)[[[OWSFingerprintProtosFingerprintData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OWSFingerprintProtosFingerprintData*) parseFromInputStream:(NSInputStream*) input {
  return (OWSFingerprintProtosFingerprintData*)[[[OWSFingerprintProtosFingerprintData builder] mergeFromInputStream:input] build];
}
+ (OWSFingerprintProtosFingerprintData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OWSFingerprintProtosFingerprintData*)[[[OWSFingerprintProtosFingerprintData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OWSFingerprintProtosFingerprintData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OWSFingerprintProtosFingerprintData*)[[[OWSFingerprintProtosFingerprintData builder] mergeFromCodedInputStream:input] build];
}
+ (OWSFingerprintProtosFingerprintData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OWSFingerprintProtosFingerprintData*)[[[OWSFingerprintProtosFingerprintData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OWSFingerprintProtosFingerprintDataBuilder*) builder {
  return [[OWSFingerprintProtosFingerprintDataBuilder alloc] init];
}
+ (OWSFingerprintProtosFingerprintDataBuilder*) builderWithPrototype:(OWSFingerprintProtosFingerprintData*) prototype {
  return [[OWSFingerprintProtosFingerprintData builder] mergeFrom:prototype];
}
- (OWSFingerprintProtosFingerprintDataBuilder*) builder {
  return [OWSFingerprintProtosFingerprintData builder];
}
- (OWSFingerprintProtosFingerprintDataBuilder*) toBuilder {
  return [OWSFingerprintProtosFingerprintData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPublicKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publicKey", self.publicKey];
  }
  if (self.hasIdentifier) {
    [output appendFormat:@"%@%@: %@\n", indent, @"identifier", self.identifier];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPublicKey) {
    [dictionary setObject: self.publicKey forKey: @"publicKey"];
  }
  if (self.hasIdentifier) {
    [dictionary setObject: self.identifier forKey: @"identifier"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OWSFingerprintProtosFingerprintData class]]) {
    return NO;
  }
  OWSFingerprintProtosFingerprintData *otherMessage = other;
  return
      self.hasPublicKey == otherMessage.hasPublicKey &&
      (!self.hasPublicKey || [self.publicKey isEqual:otherMessage.publicKey]) &&
      self.hasIdentifier == otherMessage.hasIdentifier &&
      (!self.hasIdentifier || [self.identifier isEqual:otherMessage.identifier]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPublicKey) {
    hashCode = hashCode * 31 + [self.publicKey hash];
  }
  if (self.hasIdentifier) {
    hashCode = hashCode * 31 + [self.identifier hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OWSFingerprintProtosFingerprintDataBuilder()
@property (strong) OWSFingerprintProtosFingerprintData* resultFingerprintData;
@end

@implementation OWSFingerprintProtosFingerprintDataBuilder
@synthesize resultFingerprintData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFingerprintData = [[OWSFingerprintProtosFingerprintData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFingerprintData;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) clear {
  self.resultFingerprintData = [[OWSFingerprintProtosFingerprintData alloc] init];
  return self;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) clone {
  return [OWSFingerprintProtosFingerprintData builderWithPrototype:resultFingerprintData];
}
- (OWSFingerprintProtosFingerprintData*) defaultInstance {
  return [OWSFingerprintProtosFingerprintData defaultInstance];
}
- (OWSFingerprintProtosFingerprintData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OWSFingerprintProtosFingerprintData*) buildPartial {
  OWSFingerprintProtosFingerprintData* returnMe = resultFingerprintData;
  self.resultFingerprintData = nil;
  return returnMe;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) mergeFrom:(OWSFingerprintProtosFingerprintData*) other {
  if (other == [OWSFingerprintProtosFingerprintData defaultInstance]) {
    return self;
  }
  if (other.hasPublicKey) {
    [self setPublicKey:other.publicKey];
  }
  if (other.hasIdentifier) {
    [self setIdentifier:other.identifier];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OWSFingerprintProtosFingerprintDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPublicKey:[input readData]];
        break;
      }
      case 18: {
        [self setIdentifier:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasPublicKey {
  return resultFingerprintData.hasPublicKey;
}
- (NSData*) publicKey {
  return resultFingerprintData.publicKey;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) setPublicKey:(NSData*) value {
  resultFingerprintData.hasPublicKey = YES;
  resultFingerprintData.publicKey = value;
  return self;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) clearPublicKey {
  resultFingerprintData.hasPublicKey = NO;
  resultFingerprintData.publicKey = [NSData data];
  return self;
}
- (BOOL) hasIdentifier {
  return resultFingerprintData.hasIdentifier;
}
- (NSData*) identifier {
  return resultFingerprintData.identifier;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) setIdentifier:(NSData*) value {
  resultFingerprintData.hasIdentifier = YES;
  resultFingerprintData.identifier = value;
  return self;
}
- (OWSFingerprintProtosFingerprintDataBuilder*) clearIdentifier {
  resultFingerprintData.hasIdentifier = NO;
  resultFingerprintData.identifier = [NSData data];
  return self;
}
@end

@interface OWSFingerprintProtosCombinedFingerprint ()
@property UInt32 version;
@property (strong) OWSFingerprintProtosFingerprintData* localFingerprint;
@property (strong) OWSFingerprintProtosFingerprintData* remoteFingerprint;
@end

@implementation OWSFingerprintProtosCombinedFingerprint

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasLocalFingerprint {
  return !!hasLocalFingerprint_;
}
- (void) setHasLocalFingerprint:(BOOL) _value_ {
  hasLocalFingerprint_ = !!_value_;
}
@synthesize localFingerprint;
- (BOOL) hasRemoteFingerprint {
  return !!hasRemoteFingerprint_;
}
- (void) setHasRemoteFingerprint:(BOOL) _value_ {
  hasRemoteFingerprint_ = !!_value_;
}
@synthesize remoteFingerprint;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 0;
    self.localFingerprint = [OWSFingerprintProtosFingerprintData defaultInstance];
    self.remoteFingerprint = [OWSFingerprintProtosFingerprintData defaultInstance];
  }
  return self;
}
static OWSFingerprintProtosCombinedFingerprint* defaultOWSFingerprintProtosCombinedFingerprintInstance = nil;
+ (void) initialize {
  if (self == [OWSFingerprintProtosCombinedFingerprint class]) {
    defaultOWSFingerprintProtosCombinedFingerprintInstance = [[OWSFingerprintProtosCombinedFingerprint alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOWSFingerprintProtosCombinedFingerprintInstance;
}
- (instancetype) defaultInstance {
  return defaultOWSFingerprintProtosCombinedFingerprintInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeUInt32:1 value:self.version];
  }
  if (self.hasLocalFingerprint) {
    [output writeMessage:2 value:self.localFingerprint];
  }
  if (self.hasRemoteFingerprint) {
    [output writeMessage:3 value:self.remoteFingerprint];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersion) {
    size_ += computeUInt32Size(1, self.version);
  }
  if (self.hasLocalFingerprint) {
    size_ += computeMessageSize(2, self.localFingerprint);
  }
  if (self.hasRemoteFingerprint) {
    size_ += computeMessageSize(3, self.remoteFingerprint);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OWSFingerprintProtosCombinedFingerprint*) parseFromData:(NSData*) data {
  return (OWSFingerprintProtosCombinedFingerprint*)[[[OWSFingerprintProtosCombinedFingerprint builder] mergeFromData:data] build];
}
+ (OWSFingerprintProtosCombinedFingerprint*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OWSFingerprintProtosCombinedFingerprint*)[[[OWSFingerprintProtosCombinedFingerprint builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OWSFingerprintProtosCombinedFingerprint*) parseFromInputStream:(NSInputStream*) input {
  return (OWSFingerprintProtosCombinedFingerprint*)[[[OWSFingerprintProtosCombinedFingerprint builder] mergeFromInputStream:input] build];
}
+ (OWSFingerprintProtosCombinedFingerprint*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OWSFingerprintProtosCombinedFingerprint*)[[[OWSFingerprintProtosCombinedFingerprint builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OWSFingerprintProtosCombinedFingerprint*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OWSFingerprintProtosCombinedFingerprint*)[[[OWSFingerprintProtosCombinedFingerprint builder] mergeFromCodedInputStream:input] build];
}
+ (OWSFingerprintProtosCombinedFingerprint*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OWSFingerprintProtosCombinedFingerprint*)[[[OWSFingerprintProtosCombinedFingerprint builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OWSFingerprintProtosCombinedFingerprintBuilder*) builder {
  return [[OWSFingerprintProtosCombinedFingerprintBuilder alloc] init];
}
+ (OWSFingerprintProtosCombinedFingerprintBuilder*) builderWithPrototype:(OWSFingerprintProtosCombinedFingerprint*) prototype {
  return [[OWSFingerprintProtosCombinedFingerprint builder] mergeFrom:prototype];
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) builder {
  return [OWSFingerprintProtosCombinedFingerprint builder];
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) toBuilder {
  return [OWSFingerprintProtosCombinedFingerprint builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasLocalFingerprint) {
    [output appendFormat:@"%@%@ {\n", indent, @"localFingerprint"];
    [self.localFingerprint writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRemoteFingerprint) {
    [output appendFormat:@"%@%@ {\n", indent, @"remoteFingerprint"];
    [self.remoteFingerprint writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.version] forKey: @"version"];
  }
  if (self.hasLocalFingerprint) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.localFingerprint storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"localFingerprint"];
  }
  if (self.hasRemoteFingerprint) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.remoteFingerprint storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"remoteFingerprint"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OWSFingerprintProtosCombinedFingerprint class]]) {
    return NO;
  }
  OWSFingerprintProtosCombinedFingerprint *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasLocalFingerprint == otherMessage.hasLocalFingerprint &&
      (!self.hasLocalFingerprint || [self.localFingerprint isEqual:otherMessage.localFingerprint]) &&
      self.hasRemoteFingerprint == otherMessage.hasRemoteFingerprint &&
      (!self.hasRemoteFingerprint || [self.remoteFingerprint isEqual:otherMessage.remoteFingerprint]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasLocalFingerprint) {
    hashCode = hashCode * 31 + [self.localFingerprint hash];
  }
  if (self.hasRemoteFingerprint) {
    hashCode = hashCode * 31 + [self.remoteFingerprint hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OWSFingerprintProtosCombinedFingerprintBuilder()
@property (strong) OWSFingerprintProtosCombinedFingerprint* resultCombinedFingerprint;
@end

@implementation OWSFingerprintProtosCombinedFingerprintBuilder
@synthesize resultCombinedFingerprint;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCombinedFingerprint = [[OWSFingerprintProtosCombinedFingerprint alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCombinedFingerprint;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) clear {
  self.resultCombinedFingerprint = [[OWSFingerprintProtosCombinedFingerprint alloc] init];
  return self;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) clone {
  return [OWSFingerprintProtosCombinedFingerprint builderWithPrototype:resultCombinedFingerprint];
}
- (OWSFingerprintProtosCombinedFingerprint*) defaultInstance {
  return [OWSFingerprintProtosCombinedFingerprint defaultInstance];
}
- (OWSFingerprintProtosCombinedFingerprint*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OWSFingerprintProtosCombinedFingerprint*) buildPartial {
  OWSFingerprintProtosCombinedFingerprint* returnMe = resultCombinedFingerprint;
  self.resultCombinedFingerprint = nil;
  return returnMe;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) mergeFrom:(OWSFingerprintProtosCombinedFingerprint*) other {
  if (other == [OWSFingerprintProtosCombinedFingerprint defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasLocalFingerprint) {
    [self mergeLocalFingerprint:other.localFingerprint];
  }
  if (other.hasRemoteFingerprint) {
    [self mergeRemoteFingerprint:other.remoteFingerprint];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readUInt32]];
        break;
      }
      case 18: {
        OWSFingerprintProtosFingerprintDataBuilder* subBuilder = [OWSFingerprintProtosFingerprintData builder];
        if (self.hasLocalFingerprint) {
          [subBuilder mergeFrom:self.localFingerprint];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocalFingerprint:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        OWSFingerprintProtosFingerprintDataBuilder* subBuilder = [OWSFingerprintProtosFingerprintData builder];
        if (self.hasRemoteFingerprint) {
          [subBuilder mergeFrom:self.remoteFingerprint];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRemoteFingerprint:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return resultCombinedFingerprint.hasVersion;
}
- (UInt32) version {
  return resultCombinedFingerprint.version;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) setVersion:(UInt32) value {
  resultCombinedFingerprint.hasVersion = YES;
  resultCombinedFingerprint.version = value;
  return self;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) clearVersion {
  resultCombinedFingerprint.hasVersion = NO;
  resultCombinedFingerprint.version = 0;
  return self;
}
- (BOOL) hasLocalFingerprint {
  return resultCombinedFingerprint.hasLocalFingerprint;
}
- (OWSFingerprintProtosFingerprintData*) localFingerprint {
  return resultCombinedFingerprint.localFingerprint;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) setLocalFingerprint:(OWSFingerprintProtosFingerprintData*) value {
  resultCombinedFingerprint.hasLocalFingerprint = YES;
  resultCombinedFingerprint.localFingerprint = value;
  return self;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) setLocalFingerprintBuilder:(OWSFingerprintProtosFingerprintDataBuilder*) builderForValue {
  return [self setLocalFingerprint:[builderForValue build]];
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) mergeLocalFingerprint:(OWSFingerprintProtosFingerprintData*) value {
  if (resultCombinedFingerprint.hasLocalFingerprint &&
      resultCombinedFingerprint.localFingerprint != [OWSFingerprintProtosFingerprintData defaultInstance]) {
    resultCombinedFingerprint.localFingerprint =
      [[[OWSFingerprintProtosFingerprintData builderWithPrototype:resultCombinedFingerprint.localFingerprint] mergeFrom:value] buildPartial];
  } else {
    resultCombinedFingerprint.localFingerprint = value;
  }
  resultCombinedFingerprint.hasLocalFingerprint = YES;
  return self;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) clearLocalFingerprint {
  resultCombinedFingerprint.hasLocalFingerprint = NO;
  resultCombinedFingerprint.localFingerprint = [OWSFingerprintProtosFingerprintData defaultInstance];
  return self;
}
- (BOOL) hasRemoteFingerprint {
  return resultCombinedFingerprint.hasRemoteFingerprint;
}
- (OWSFingerprintProtosFingerprintData*) remoteFingerprint {
  return resultCombinedFingerprint.remoteFingerprint;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) setRemoteFingerprint:(OWSFingerprintProtosFingerprintData*) value {
  resultCombinedFingerprint.hasRemoteFingerprint = YES;
  resultCombinedFingerprint.remoteFingerprint = value;
  return self;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) setRemoteFingerprintBuilder:(OWSFingerprintProtosFingerprintDataBuilder*) builderForValue {
  return [self setRemoteFingerprint:[builderForValue build]];
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) mergeRemoteFingerprint:(OWSFingerprintProtosFingerprintData*) value {
  if (resultCombinedFingerprint.hasRemoteFingerprint &&
      resultCombinedFingerprint.remoteFingerprint != [OWSFingerprintProtosFingerprintData defaultInstance]) {
    resultCombinedFingerprint.remoteFingerprint =
      [[[OWSFingerprintProtosFingerprintData builderWithPrototype:resultCombinedFingerprint.remoteFingerprint] mergeFrom:value] buildPartial];
  } else {
    resultCombinedFingerprint.remoteFingerprint = value;
  }
  resultCombinedFingerprint.hasRemoteFingerprint = YES;
  return self;
}
- (OWSFingerprintProtosCombinedFingerprintBuilder*) clearRemoteFingerprint {
  resultCombinedFingerprint.hasRemoteFingerprint = NO;
  resultCombinedFingerprint.remoteFingerprint = [OWSFingerprintProtosFingerprintData defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
